plugins {
    id 'net.minecraftforge.gradle'
    id 'net.darkhax.curseforgegradle'
    id 'org.spongepowered.mixin'
}

base {
    archivesName = "${mod_name}-Forge-${minecraft_version}"
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'

            if (project.ext.mixin_enabled) {
                arg "-mixin.config=${mod_id}.mixins.json"
            }

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                modClientRun {
                    source sourceSets.main
                    source project(':common').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'

            if (project.ext.mixin_enabled) {
                arg "-mixin.config=${mod_id}.mixins.json"
            }

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                modServerRun {
                    source sourceSets.main
                    source project(':common').sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("net.darkhax.bookshelf:Bookshelf-Forge-${project.ext.minecraft_version}:${project.ext.bookshelf_version}")
    implementation fg.deobf("net.darkhax.botanypots:BotanyPots-Forge-${project.ext.minecraft_version}:${project.ext.botanypots_version}")
    implementation fg.deobf("net.darkhax.botanytrees:BotanyTrees-Forge-${project.ext.minecraft_version}:${project.ext.botanytrees_version}")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-api-forge:${rei_version}")
    compileOnly fg.deobf("dev.architectury:architectury-forge:8.1.87") // It doesn't actually matter which version we use as this is compileOnly
    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:10.0.96") // It doesn't actually matter which version we use as this is compileOnly
    compileOnly fg.deobf("curse.maven:top-245211:${top_version}")

    compileOnly project(':common')

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

configurations {
    // Fails without this as compileOnly dependencies do not get added to the test classpath
    testCompileOnly.extendsFrom compileOnly
}

tasks.withType(JavaCompile).configureEach {
    source(project(':common').sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
    source(project(':common').sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(':common').sourceSets.main.allSource)
}

processResources {
    from project(':common').sourceSets.main.resources

    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at
    // build time.
    buildProps.put('file', [jarVersion: project.version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }

    if (project.ext.mixin_enabled) {
        filesMatching(["${mod_id}.mixins.json".toString()]) {
            expand buildProps
        }
    }
}

jar.finalizedBy('reobfJar')

jar {
    manifest {
        def newProps = [:]

        if (project.ext.mixin_enabled) {
            newProps['MixinConfigs'] = "${mod_id}.mixins.json"
        }

        attributes(newProps)
    }
}

// -- Mixin Support
if (project.ext.mixin_enabled) {
    mixin {
        // Tells the mixin plugin where to put the generated refmap file.
        add sourceSets.main, "${mod_id}.refmap.json"
    }
}