plugins {
    id 'fabric-loom'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
    id 'idea'
}

apply from: '../gradle/property_helper.gradle'

base {
    archivesName = "${mod_name}-Fabric-${minecraft_version}"
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation "net.darkhax.bookshelf:Bookshelf-Fabric-${minecraft_version}:${bookshelf_version}"
    modImplementation "net.darkhax.botanypots:BotanyPots-Fabric-${minecraft_version}:${botanypots_version}"
    modCompileOnlyApi "mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}"
    modRuntimeOnly "mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"

    implementation project(':common')
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

processResources {
    from project(':common').sourceSets.main.resources

    def buildProps = project.properties.clone()

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
        expand buildProps
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(':common').sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
    source(project(':common').sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(':common').sourceSets.main.allSource)
}